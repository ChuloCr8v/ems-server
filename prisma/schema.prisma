generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prospect {
  id           String      @id @default(uuid()) @db.Uuid
  email        String      @unique
  firstName    String      @default("")
  lastName     String      @default("")
  phone        String
  gender       String
  role         String
  duration     String?
  startDate    DateTime
  departmentId String?     @db.Uuid
  department   Department? @relation(fields: [departmentId], references: [id])
  jobType      JobType
  user         User?
  invite       Invite[]
  upload       Upload[]
  // comment      Comment[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  eId           String?       @unique
  email         String?       @unique
  firstName     String
  lastName      String
  phone         String
  workPhone     String?
  role          String
  gender        String
  duration      String?
  jobType       JobType
  departmentId  String?       @db.Uuid
  department    Department?   @relation(fields: [departmentId], references: [id])
  country       String
  state         String
  address       String
  startDate     DateTime?
  status        Status        @default(PENDING)
  userRole      Role?
  maritalStatus MaritalStatus
  contacts      Contacts?
  offboarding   Offboarding?
  levelId       String?       @db.Uuid
  level         Level?        @relation(fields: [levelId], references: [id])
  prospectId    String?       @unique @db.Uuid
  prospect      Prospect?     @relation(fields: [prospectId], references: [id])
  upload        Upload[]
  invite        Invite[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  comment       Comment[]
  assignments   Assignment[]
  faults        Fault[]
}

model Invite {
  id         String    @id @default(uuid()) @db.Uuid
  email      String
  token      String    @unique
  status     Status    @default(PENDING)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  acceptedAt DateTime?
  declinedAt DateTime?
  sentById   String?   @db.Uuid
  sentBy     User?     @relation(fields: [sentById], references: [id])
  prospectId String    @db.Uuid
  prospect   Prospect  @relation(fields: [prospectId], references: [id])
  comment    Comment[]
}

model Department {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  prospect  Prospect[]
  user      User[]
  createdAt DateTime   @default(now())
  updatedAT DateTime   @updatedAt
}

model Level {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  rank      Int
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
  id            String       @id @default(uuid()) @db.Uuid
  name          String
  size          Int
  type          String
  bytes         Bytes?
  prospectId    String?      @db.Uuid
  prospect      Prospect?    @relation(fields: [prospectId], references: [id])
  userId        String?      @db.Uuid
  user          User?        @relation(fields: [userId], references: [id])
  offboardingId String?      @db.Uuid
  offboarding   Offboarding? @relation(fields: [offboardingId], references: [id])
  // assetId       String?      @db.Uuid
  // asset         Asset?       @relation("AssetProof", fields: [assetId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([userId, name])
}

model Contacts {
  id        String            @id @default(uuid()) @db.Uuid
  guarantor GuarantorContact?
  emergency EmergencyContact?
  userId    String            @unique @db.Uuid
  user      User              @relation(fields: [userId], references: [id])
}

model EmergencyContact {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  contacts  Contacts @relation(fields: [contactId], references: [id])
  contactId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuarantorContact {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  contacts  Contacts @relation(fields: [contactId], references: [id])
  contactId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  comment   String
  userId    String?  @db.Uuid
  user      User?    @relation(fields: [userId], references: [id])
  inviteId  String?  @db.Uuid
  invite    Invite?  @relation(fields: [inviteId], references: [id])
  // prospectId String?   @db.Uuid
  // prospect   Prospect? @relation(fields: [prospectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id           String        @id @default(uuid())  @db.Uuid
  name         String
  serialNo     String        @unique
  category     AssetCategory
  purchaseDate DateTime
  vendor       String
  cost         Float
  assetImage   String?
  barcodeImage String?
  description  String?
  isReturned   Boolean       @default(false)
  // paymentProof  Upload[]      @relation("AssetProof")
  status       AssetStatus   @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assignments  Assignment[]
  faults       Fault[]
}

model Assignment {
  id         String   @id @default(uuid())   @db.Uuid
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  assignedAt DateTime
  notes      String?
  condition  String
}

model Fault {
  id         String      @id @default(uuid())   @db.Uuid
  assetId    String      @db.Uuid
  asset      Asset       @relation(fields: [assetId], references: [id])
  reportedBy String      @db.Uuid
  user       User        @relation(fields: [reportedBy], references: [id])
  images     String[]
  reason     String
  status     FaultStatus @default(PENDING)
  resolvedAt DateTime?
  createdAt  DateTime    @default(now())
}

model Offboarding {
  id           String                 @id @default(uuid()) @db.Uuid
  type         ExitType
  lastWorkDate DateTime
  reason       String
  noticePeriod Boolean                @default(false)
  userId       String                 @unique @db.Uuid
  status       Status                 @default(PENDING)
  user         User                   @relation(fields: [userId], references: [id])
  uploads      Upload[]
  checklist    OffboardingChecklist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OffboardingChecklist {
  id            String      @id @default(uuid())   @db.Uuid
  task          String
  status        Status      @default(PENDING)
  // proof   Upload[]
  offboardingId String      @db.Uuid
  offboarding   Offboarding @relation(fields: [offboardingId], references: [id])
}

/////////////////////////////////// ENUMS  /////////////////////////////////////////////

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  ISSUE_REPORTED
  ACTIVE
  CONFIRMED
  COMPLETED
  IN_PROGRESS
}

enum JobType {
  FULL_TIME
  CONTRACT
}

enum MaritalStatus {
  SINGLE
  MARRIED
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
  MANAGER
  FACILITY
}

enum AssetCategory {
  HARDWARE
  ACCESSORY
  LOGISTICS
  OFFICE_FURNITURE
  SOFTWARE
  SAFETY_EQUIPMENT
}

enum AssetStatus {
  AVAILABLE
  ASSIGNED
  REPORTED
  FAULTY
  RETIRED
  ACCEPTED
  MAINTENANCE
}

enum FaultStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  REJECTED
}

enum ExitType {
  RESIGNATION
  TERMINATION
}

// enum AssetStatus {
//   ACTIVE
//   RETURNED
//   DAMAGED
//   LOST
// }
