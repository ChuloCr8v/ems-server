generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////////  ONBOARDING ////////////////////////////////

model Notification {
  id          String   @id @default(uuid())
  recipientId String   @db.Uuid
  actorId     String?  @db.Uuid
  prospectId  String?  @db.Uuid
  type        String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recipient User      @relation("NotificationRecipient", fields: [recipientId], references: [id])
  actor     User?     @relation("NotificationActor", fields: [actorId], references: [id])
  prospect  Prospect? @relation(fields: [prospectId], references: [id])
}

model Prospect {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  firstName    String         @default("")
  lastName     String         @default("")
  phone        String
  gender       String
  role         String
  duration     String?
  startDate    DateTime
  departmentId String?        @db.Uuid
  department   Department?    @relation(fields: [departmentId], references: [id])
  jobType      JobType
  user         User?
  invite       Invite[]
  upload       Upload[]
  // comment      Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  notification Notification[]
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  eId           String?        @unique
  email         String?        @unique
  workEmail     String?
  firstName     String
  lastName      String
  phone         String
  workPhone     String?
  role          String?
  gender        String
  duration      String?
  jobType       JobType?
  departmentId  String?        @db.Uuid
  department    Department?    @relation("Department", fields: [departmentId], references: [id])
  country       String?
  state         String?
  address       String?
  startDate     DateTime?
  status        Status         @default(PENDING)
  userRole      Role?
  maritalStatus MaritalStatus?
  contacts      Contacts?
  offboarding   Offboarding?
  levelId       String?        @db.Uuid
  level         Level?         @relation(fields: [levelId], references: [id])
  prospectId    String?        @unique @db.Uuid
  prospect      Prospect?      @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  userDocuments Upload[] @relation("UserDocuments")

  invite      Invite[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comment     Comment[]
  assignments Assignment[]

  faultReporter Fault[] @relation("reportedBy")
  faultResolver Fault[] @relation("resolvedBy")

  departmentHeadId String?     @db.Uuid
  departmentHead   Department? @relation("DepartmentHead")

  departmentCreator Department? @relation("departmentCreator")

  notificationRecipient Notification[] @relation("NotificationRecipient")
  notificationActor     Notification[] @relation("NotificationActor")

  requestDoa LeaveRequest[] @relation("deedOfAssignement")
  requests   LeaveRequest[] @relation("user")
  approver   Approval[]     @relation("approver")

  @@index([email])
  @@index([eId])
  @@index([firstName, lastName])
  @@index([departmentId])
  @@index([levelId])
}

model Invite {
  id         String    @id @default(uuid()) @db.Uuid
  email      String
  token      String    @unique
  status     Status    @default(PENDING)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  acceptedAt DateTime?
  declinedAt DateTime?
  sentById   String?   @db.Uuid
  sentBy     User?     @relation(fields: [sentById], references: [id])
  prospectId String    @db.Uuid
  prospect   Prospect  @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  comment        Comment[]
  declineReasons String[]
}

model Department {
  id       String     @id @default(uuid()) @db.Uuid
  name     String
  prospect Prospect[]
  user     User[]     @relation("Department")

  createdBy   User?   @relation("departmentCreator", fields: [createdById], references: [id])
  createdById String? @unique @db.Uuid

  departmentHeadId String? @unique @db.Uuid
  departmentHead   User?   @relation("DepartmentHead", fields: [departmentHeadId], references: [id])

  status DepartmentStatus? @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model Level {
  id           String             @id @default(uuid()) @db.Uuid
  name         String
  rank         Int
  users        User[]
  entitlements LevelEntitlement[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Upload {
  id    String  @id @default(uuid()) @db.Uuid
  name  String
  size  Int
  type  String
  bytes Bytes?
  key   String?
  order Int?
  uri   String?

  prospectId String?   @db.Uuid
  prospect   Prospect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)

  userId        String?           @db.Uuid
  userDocuments User?             @relation("UserDocuments", fields: [userId], references: [id])
  offboardingId String?           @db.Uuid
  offboarding   Offboarding?      @relation(fields: [offboardingId], references: [id])
  commentId     String?           @db.Uuid
  comment       Comment?          @relation(fields: [commentId], references: [id])
  handoverId    String?           @db.Uuid
  handover      HandoverDocument? @relation(fields: [handoverId], references: [id])
  paymentId     String?           @db.Uuid
  payment       Payment?          @relation(fields: [paymentId], references: [id])
  assetId       String?           @db.Uuid
  asset         Asset?            @relation("AssetImages", fields: [assetId], references: [id])
  requestId     String?           @db.Uuid
  request       LeaveRequest?     @relation(fields: [requestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contacts {
  id        String            @id @default(uuid()) @db.Uuid
  guarantor GuarantorContact?
  emergency EmergencyContact?
  userId    String            @unique @db.Uuid
  user      User              @relation(fields: [userId], references: [id])
}

model EmergencyContact {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  contacts  Contacts @relation(fields: [contactId], references: [id])
  contactId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuarantorContact {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  contacts  Contacts @relation(fields: [contactId], references: [id])
  contactId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id             String            @id @default(uuid()) @db.Uuid
  comment        String
  userId         String?           @db.Uuid
  user           User?             @relation(fields: [userId], references: [id])
  inviteId       String?           @db.Uuid
  invite         Invite?           @relation(fields: [inviteId], references: [id])
  offboardingId  String?           @db.Uuid
  offboarding    Offboarding?      @relation(fields: [offboardingId], references: [id])
  paymentId      String?           @db.Uuid
  payment        Payment?          @relation(fields: [paymentId], references: [id])
  handoverId     String?           @db.Uuid
  handover       HandoverDocument? @relation(fields: [handoverId], references: [id])
  leaveRequestId String?           @db.Uuid
  leaveRequest   LeaveRequest?     @relation(fields: [leaveRequestId], references: [id])
  uploads        Upload[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

//////////////////////////////// ASSETS ///////////////////////
model Asset {
  id           String        @id @default(uuid()) @db.Uuid
  assetId      String        @unique
  name         String
  serialNo     String        @unique
  category     AssetCategory
  purchaseDate DateTime
  vendor       String
  cost         Float
  assetImages  Upload[]      @relation("AssetImages")
  description  String?
  isReturned   Boolean       @default(false)
  status       AssetStatus   @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assignments  Assignment[]
  faults       Fault[]
}

model Assignment {
  id            String            @id @default(uuid())
  asset         Asset             @relation(fields: [assetId], references: [id])
  assetId       String            @db.Uuid
  user          User              @relation(fields: [userId], references: [id])
  userId        String            @db.Uuid
  assignedAt    DateTime
  notes         String?
  condition     String?
  status        AssignmentStatus?
  isVerified    Boolean           @default(false)
  isPaid        Boolean           @default(false)
  verifiedAt    DateTime?
  returnedAt    DateTime?
  offboardingId String?           @db.Uuid
  offboarding   Offboarding?      @relation(fields: [offboardingId], references: [id])
}

model Fault {
  id           String      @id @default(uuid()) @db.Uuid
  assetId      String      @db.Uuid
  asset        Asset       @relation(fields: [assetId], references: [id])
  reportedById String?     @db.Uuid
  reportedBy   User?       @relation("reportedBy", fields: [reportedById], references: [id])
  resolvedById String?     @db.Uuid
  resolvedBy   User?       @relation("resolvedBy", fields: [resolvedById], references: [id])
  images       String[]
  reason       String?
  notes        String?
  status       FaultStatus @default(PENDING)
  resolvedAt   DateTime?   @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  @@index([reportedById])
  @@index([resolvedById])
  @@index([assetId])
  @@index([status])
}

///////////////////////////   OFFBOARDING ///////////////////////

model Offboarding {
  id           String                 @id @default(uuid()) @db.Uuid
  type         ExitType
  lastWorkDate DateTime
  reason       String
  noticePeriod Boolean                @default(false)
  status       Status                 @default(PENDING)
  userId       String                 @unique @db.Uuid
  user         User                   @relation(fields: [userId], references: [id])
  uploads      Upload[]
  checklist    OffboardingChecklist[]
  handover     HandoverDocument[]
  comment      Comment[]
  payments     Payment[]
  assignments  Assignment[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model OffboardingChecklist {
  id            String      @id @default(uuid()) @db.Uuid
  task          String
  status        Status      @default(PENDING)
  // proof   Upload[]
  offboardingId String      @db.Uuid
  offboarding   Offboarding @relation(fields: [offboardingId], references: [id])
}

model HandoverDocument {
  id            String       @id @default(uuid()) @db.Uuid
  offboardingId String?      @db.Uuid
  offboarding   Offboarding? @relation(fields: [offboardingId], references: [id])
  upload        Upload[]
  comments      Comment[]
  isApproved    Boolean      @default(false)
  approvedAt    DateTime?
  notes         String?
  createdAt     DateTime     @default(now())
}

model Payment {
  id            String       @id @default(uuid()) @db.Uuid
  offboardingId String?      @db.Uuid
  offboarding   Offboarding? @relation(fields: [offboardingId], references: [id])
  approved      Boolean      @default(false)
  approvedBy    String?      @db.Uuid
  approvedAt    DateTime?
  notes         String?
  uploads       Upload[]
  comment       Comment[]
  createdAt     DateTime     @default(now())
}

///////////////////////////////// LEAVE //////////////////////////////////

model Entitlement {
  id        String             @id @default(uuid()) @db.Uuid
  name      String             @unique
  unit      String
  levels    LevelEntitlement[]
  request   LeaveRequest[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model LevelEntitlement {
  id            String      @id @default(uuid()) @db.Uuid
  level         Level       @relation(fields: [levelId], references: [id])
  levelId       String      @db.Uuid
  entitlement   Entitlement @relation(fields: [entitlementId], references: [id])
  entitlementId String      @db.Uuid
  value         Int? // The value of the entitlement for this level
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([levelId, entitlementId])
}

model LeaveRequest {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String      @db.Uuid
  user              User        @relation("user", fields: [userId], references: [id])
  doaId             String      @db.Uuid
  doa               User        @relation("deedOfAssignement", fields: [doaId], references: [id])
  startDate         DateTime
  endDate           DateTime
  currentApprovalId String?     @db.Uuid
  reason            Comment[]
  approvals         Approval[]
  status            LeaveStatus @default(PENDING)
  typeId            String      @db.Uuid
  type              Entitlement @relation(fields: [typeId], references: [id])
  uploads           Upload[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Approval {
  id             String       @id @default(uuid()) @db.Uuid
  leaveRequestId String       @db.Uuid
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id])
  approverId     String       @db.Uuid
  approver       User         @relation("approver", fields: [approverId], references: [id])
  status         LeaveStatus  @default(PENDING)
  phase          Int
  reason         String?
  actionDate     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([leaveRequestId, phase])
}

///////////////////////////////////////////// ENUMS  /////////////////////////////////////////////

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  ISSUE_REPORTED
  ACTIVE
  CONFIRMED
  COMPLETED
  IN_PROGRESS
}

enum JobType {
  FULL_TIME
  CONTRACT
}

enum MaritalStatus {
  SINGLE
  MARRIED
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
  MANAGER
  FACILITY
  HR
  ASSET_MANAGER
}

enum AssetCategory {
  HARDWARE
  ACCESSORY
  LOGISTICS
  OFFICE_FURNITURE
  SOFTWARE
  SAFETY_EQUIPMENT
}

enum AssetStatus {
  AVAILABLE
  ASSIGNED
  REPORTED
  FAULTY
  RETIRED
  ACCEPTED
  MAINTENANCE
}

enum AssignmentStatus {
  ASSIGNED
  RETURNED
}

enum FaultStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  REJECTED
}

enum ExitType {
  RESIGNATION
  TERMINATION
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
}
