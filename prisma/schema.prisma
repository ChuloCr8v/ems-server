generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prospect {
  id           String      @id @default(uuid()) @db.Uuid
  email        String      @unique
  firstName    String      @default("")
  lastName     String      @default("")
  phone        String
  gender       String
  role         String
  duration     String?
  startDate    DateTime
  departmentId String?     @db.Uuid
  department   Department? @relation(fields: [departmentId], references: [id])
  jobType      JobType
  user         User?
  invite       Invite[]
  upload       Upload[]
  // comment      Comment[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  eId           String?        @unique
  email         String?       @unique
  firstName     String
  lastName      String
  phone         String
  workPhone     String?
  role          String
  gender        String
  duration      String?
  jobType       JobType
  departmentId  String?       @db.Uuid
  department    Department?   @relation(fields: [departmentId], references: [id])
  country       String
  state         String
  address       String
  startDate     DateTime?
  status        Status        @default(PENDING)
  userRole      Role?
  maritalStatus MaritalStatus
  contacts      Contacts?
  levelId       String?       @db.Uuid
  level         Level?        @relation(fields: [levelId], references: [id])
  prospectId    String?       @unique @db.Uuid
  prospect      Prospect?     @relation(fields: [prospectId], references: [id])
  upload        Upload[]
  invite        Invite[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  comment       Comment[]
}

model Invite {
  id         String    @id @default(uuid()) @db.Uuid
  email      String
  token      String    @unique
  status     Status    @default(PENDING)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  acceptedAt DateTime?
  declinedAt DateTime?
  sentById   String?   @db.Uuid
  sentBy     User?     @relation(fields: [sentById], references: [id])
  prospectId String    @db.Uuid
  prospect   Prospect  @relation(fields: [prospectId], references: [id])
  comment    Comment[]


}

model Department {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  prospect  Prospect[]
  user      User[]
  createdAt DateTime   @default(now())
  updatedAT DateTime   @updatedAt
}

model Level {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  rank      Int
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Upload {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  size       Int
  type       String
  bytes      Bytes?
  prospectId String?   @db.Uuid
  prospect   Prospect? @relation(fields: [prospectId], references: [id])
  userId     String?   @db.Uuid
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, name])
}

model Contacts {
  id        String            @id @default(uuid()) @db.Uuid
  guarantor GuarantorContact?
  emergency EmergencyContact?
  userId    String            @unique @db.Uuid
  user      User              @relation(fields: [userId], references: [id])
}

model EmergencyContact {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  contacts  Contacts @relation(fields: [contactId], references: [id])
  contactId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuarantorContact {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String
  contacts  Contacts @relation(fields: [contactId], references: [id])
  contactId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  comment   String
  userId    String?  @db.Uuid
  user      User?    @relation(fields: [userId], references: [id])
  inviteId  String?  @db.Uuid
  invite    Invite?  @relation(fields: [inviteId], references: [id])
  // prospectId String?   @db.Uuid
  // prospect   Prospect? @relation(fields: [prospectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////////////////// ENUMS  /////////////////////////////////////////////

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  ISSUE_REPORTED
  ACTIVE
  CONFIRMED
}

enum JobType {
  FULL_TIME
  CONTRACT
}

enum MaritalStatus {
  SINGLE
  MARRIED
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
  MANAGER
  FACILITY
}
